# 导入matplotlib
import matplotlib.pyplot as plt
import numpy as np
1.基本用法
x = np.linspace(-3, 3, 50) # 范围是(-3,3);个数是50
y1 = 2*x + 1
y2 = x**2
plt.figure() #(figure图像）定义一个图像窗口
# plt.figure(num=3, figsize=(8,5))
plt.plot(x, y2)
 #画出(x ,y1)曲线，曲线的颜色(color)为红色;曲线的宽度(linewidth)为1.0；曲线的类型(linestyle)为虚线.
plt.plot(x, y1, color='red', linewidth=1.0, linestyle='--',) # 最后一个逗号加不加无所谓
plt.title('happy') #设置标题
plt.xlim((-1,2)) # (limit限制）设置x坐标轴范围：(-1, 2)
plt.ylim((-2,3))
plt.xlabel('I am x') #(label标签)设置x坐标轴名称
plt.ylabel('I am y')
plt.show()

# (1)设置坐标轴
# 用plt.xticks设置x轴刻度：范围是(-1,2);个数是5.
new_ticks = np.linspace(-1, 2, 5)
plt.xticks(new_ticks)
# 用plt.yticks设置y轴刻度以及名称：刻度为[-2, -1.8, -1, 1.22, 3]；对应刻度的名称为[‘really bad’,’bad’,’normal’,’good’, ‘really good’]. 
# 用$$设置字体，\为转义符，这里用于显示空格
plt.yticks([-2,-1.8,-1,1.22,3], [r'$really\ bad$', r'$bad$', r'$normal$', r'$good$', r'$really\ good$'])

# 获取当前坐标轴信息
ax = plt.gca() # gca为'get current axis'缩写
ax.spines['right'].set_color('none') # (spine脊柱)设置右侧边框颜色为无，默认白色
ax.spines['top'].set_color('none')
ax.spines['bottom'].set_color('r') #设置下侧边框颜色为红色
# 将x轴刻度设置在下边框处（bottom）.（所有位置：top，bottom，both，default，none）
ax.xaxis.set_ticks_position('bottom')
# 将下侧边框的位置设置在y=0的位置，（位置所有属性：outward，axes，data）
ax.spines['bottom'].set_position(('data',0))
ax.yaxis.set_ticks_position('left') # 将y轴刻度设置在左边框处（left）
ax.spines['left'].set_position(('data',0))

# (2)用legend添加图例
l1, = plt.plot(x, y1, color='red', linewidth=1.0, linestyle='--', label='square line')
l2, = plt.plot(x, y2, label='linear line') # label设置图例显示的信息
# plt.legend(loc='upper right') # 将图例添加在图中的右上角
# 单独修改label信息, 这里需要将plt.plot用变量储存起来，l1, l2,要以逗号结尾, 因为plt.plot() 返回的是一个列表.
plt.legend(handles=[l1,l2], labels=['red','blue'], loc='best') # ’best’表示自动分配最佳位置
'''
'loc'参数,:
 'best' : 0,          
 'upper right'  : 1,
 'upper left'   : 2,
 'lower left'   : 3,
 'lower right'  : 4,
 'right'        : 5,
 'center left'  : 6,
 'center right' : 7,
 'lower center' : 8,
 'upper center' : 9,
 'center'       : 10,
'''

# (3)annotation标注
# 画函数图
x = np.linspace(-3,3,50)
y = 2*x + 1
plt.figure(num=1,figsize=(8,7))
plt.plot(x,y)
# 移动坐标
ax = plt.gca()
ax.spines['right'].set_color('none')
ax.spines['top'].set_color('none')
ax.xaxis.set_ticks_position('bottom')
ax.spines['bottom'].set_position(('data',0))
ax.yaxis.set_ticks_position('left')
ax.spines['left'].set_position(('data',0))
# 标注点(x0,y0)
x0 = 1
y0 = 2*x0 + 1
plt.plot([x0,x0], [0,y0], 'k--', linewidth=2.0) # 画点(x0,y0)到x轴的线段，'k--'表示黑色的虚线
plt.scatter([x0,], [y0,], s=50, color='b') # (scatter离散)画出点(x0,y0)，用属性's'设置尺寸
# 添加注释annotate
# 参数xycoords='data' 表示基于数据的值来选位置, xytext=(+30, -30)表示标注对于坐标(x0,y0)的相对位置
plt.annotate(r'$2x+1=%s$' % y0, xy=(x0, y0), xycoords='data', xytext=(+30, -30),
             textcoords='offset points', fontsize=16, # (coordinate坐标，offset points偏移点）
             arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=.2') # arrowprops是对图中箭头类型的一些设置
            )
# 添加注释text, -3.7,3为text起始坐标点
plt.text(-3.7, 3, r'$This\ is\ the\ some\ text. \mu\ \sigma_i\ \alpha_t$',
         fontdict={'size': 16, 'color': 'r'})   # (font字形)

# (4)设置tick能见度
for label in ax.get_xticklabels() + ax.get_yticklabels():
    label.set_fontsize(12) # 调整字体大小
    # 设置backgroundbox,在 plt 2.0.2 或更高的版本中, 设置 zorder 给 plot 在 z 轴方向排序
    label.set_bbox(dict(facecolor='y', edgecolor='r', alpha=0.2, zorder=2))# alpha设置透明度为20%

2.画图种类
(1)scatter散点图
# 生成1024个呈标准正态分布的二维数据组 (平均数是0，方差为1) 作为一个数据集，并图像化这个数据集
n = 1024 # data size
n = 1024 # data size
x = np.random.normal(0,1,n)
y = np.random.normal(0,1,n)
T = np.arctan2(y,x) # color value

plt.scatter(x, y, s=75, c=T, alpha=0.5) # size为75，颜色为T，透明度50%
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
# 隐藏坐标
plt.xticks(()) # ignore xticks 
plt.yticks(()) # ignore yticks
plt.show()

(2) 3D图 
from mpl_toolkits.mplot3d import Axes3D
fig = plt.figure()
ax = Axes3D(fig)
X = np.arange(-4, 4, 0.25)
Y = np.arange(-4, 4, 0.25)
X,Y = np.meshgrid(X,Y)
# print(X)
# print(Y)
R = np.sqrt(X ** 2 + Y ** 2)
Z= np.sin(R)
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=plt.get_cmap('rainbow')) 
# rstride 和 cstride 分别代表 row 和 column 的跨度。
plt.show()

3.多图合并显示
(1)均匀图中图
plt.figure()
# 将整个图像窗口分为2行2列, 当前位置为1.也可写为plt.subplot(221)
plt.subplot(2,2,1) 
plt.plot([0,1],[0,1])
plt.xlim(-1,2)
plt.ylim(-1,2)

plt.subplot(2,2,2) 
plt.plot([0,1],[0,1])

plt.subplot(2,2,3) 
plt.plot([0,1,2],[0,1,4])

plt.subplot(2,2,4) 
plt.scatter([0,1,2],[0,1,4], color='r')
plt.show()

(2)subplot分格显示
# method1:subplot2grid
plt.figure()
# 创建3x3的网格，图ax1从坐标(0,0)开始，列跨度(colspan)为3，行跨度(rowspan)为1
ax1 = plt.subplot2grid((3,3),(0,0),colspan=3,rowspan=1)
ax1.plot([0,1],[0,1]) #与plt.plot一样
ax1.set_title('ax1') # 与plt.title一样，所有设置类plt.xxx都改为ax1.set_xxx

ax2 = plt.subplot2grid((3,3),(1,0),colspan=2) # colspan,rowspan默认为1
# ax2.set_title('ax2')

ax3 = plt.subplot2grid((3,3),(1,2),rowspan=2)
ax3.scatter([0,1,2],[0,1,8], color='r')
ax3.set_title('ax3')
ax3.set_xlim(-1,3)
ax3.set_ylim(-1,9)
ax3.set_xticks(())
ax3.set_yticks(())

ax4 = plt.subplot2grid((3,3),(2,0)) 
# ax4.set_title('ax4')
ax4.set_ylabel('ax4_y')

ax5 = plt.subplot2grid((3,3),(2,1))
# ax5.set_title('ax5')

plt.show()

# method2:gridspec
import matplotlib.gridspec as gridspec

gs = gridspec.GridSpec(3,3) # 将整个图像窗口分成3行3列
ax1 = plt.subplot(gs[0, :]) # 表示这个图占第0行和所有列
ax2 = plt.subplot(gs[1, :2]) # 表示这个图占第1行和第2列前的所有列
ax3 = plt.subplot(gs[1:, 2]) # 表示这个图占第1行后的所有行和第2列
ax4 = plt.subplot(gs[2, 0]) # 表示这个图占第2行和第0列.
ax5 = plt.subplot(gs[-1, -2]) # 表示这个图占倒数第1行和倒数第2列.

plt.show()

4.动图
在matplotlib中画图有两种显示模式：

（1）阻塞模式，即必须利用plt.show()显示图片，且图片关闭之前代码将阻塞在该行。

（2）交互模式，即plt.plot()后立马显示图片，且不阻塞代码的继续运行。

Matplotlib中默认是使用阻塞模式，动图需要开启交互模式，相关函数：

plt.ion()：打开交互模式
plt.ioff()：关闭交互模式
plt.clf()：清除当前的Figure对象
plt.cla()：清除当前的Axes对象
plt.pause()：暂停功能

